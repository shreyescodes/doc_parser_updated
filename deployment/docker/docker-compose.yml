version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: doc_parser_postgres
    environment:
      POSTGRES_DB: doc_parser
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - doc_parser_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: doc_parser_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - doc_parser_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: doc_parser_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - doc_parser_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Main Application
  app:
    build: 
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    container_name: doc_parser_app
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/doc_parser
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: doc_parser
      DB_USER: postgres
      DB_PASSWORD: postgres
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: documents
      MINIO_SECURE: "false"
      
      # Security
      SECRET_KEY: your-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Application
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 52428800  # 50MB
      ALLOWED_EXTENSIONS: pdf,png,jpg,jpeg,tiff
      
      # OCR
      TESSERACT_CMD: /usr/bin/tesseract
      TESSERACT_LANG: eng
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FILE: /app/logs/app.log
    ports:
      - "8000:8000"
    volumes:
      - ../../uploads:/app/uploads
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - doc_parser_network
    restart: unless-stopped

  # Celery Worker for background tasks
  celery-worker:
    build: 
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    container_name: doc_parser_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info
    environment:
      # Same environment as app
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/doc_parser
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
    volumes:
      - ../../uploads:/app/uploads
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - doc_parser_network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build: 
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    container_name: doc_parser_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/doc_parser
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
    volumes:
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - doc_parser_network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: doc_parser_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - doc_parser_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  doc_parser_network:
    driver: bridge